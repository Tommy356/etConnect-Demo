//
//  EISocketPort.h
//  EIConnectionIOS
//
//  Created by Thomas Krautter on 11.10.13.
//  Copyright (c) 2013 Thomas Krautter. All rights reserved.
//

#import <Foundation/Foundation.h>

@class EINetService, EINetMessage, EINetConnection;
@class EIConnection;

/** other than 'traditional' NSPorts, the EISocketPort
 *  links to a service and to an EINetConnection, which may be owned by a
 *  port.
 */

@interface EISocketPort : NSPort
{
    BOOL        _is_valid;
    id          _delegate;
    /** port ID, unique on a system. portID's are generated by the Connection Server */
    //NSUInteger  _portID;
}

@property (nonatomic, retain) NSString* name;
@property (nonatomic, retain) EINetService* eiSvc;
@property (nonatomic, retain) EINetConnection* connection;
@property (nonatomic, assign) NSUInteger portID;
@property (nonatomic, assign) NSUInteger remotePortID;

/**
 * Basic constructor returns object capable of send and receive.<br />
 * By default, the port returned is an instance of [NSMessagePort]
 * capable only of host-local communication.  However, the
 * <code>NSPortIsMessagePort</code> user default may be set to NO to
 * change the behavior so that the returned value is an instance of
 * the [NSSocketPort] class.
 */
+ (EISocketPort*) port;

/** creates a child port serving an incoming connection */
+ (EISocketPort*) portWithParentPort:(EISocketPort*)parentPort;

#ifndef NEW_STYLE
/** create a port bound to the net service passed */
+ (EISocketPort*) portNamed:(NSString*)name withService:(EINetService*)eiSvc;
#endif //#ifndef NEW_STYLE

#pragma mark NSPort OSX Compatibility Routines
- (void)addConnection:(EIConnection *)conn toRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode;
- (void)removeConnection:(EIConnection *)conn fromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode;

/**
 *  This is called for the send port of a connection, when the connection
 *  is invalidated.
 *  The port needs to close & remove all connections...
 */
- (void)shutDown;

/**
 * Mark port as invalid, deregister with listeners and cease further network
 * operations.  Subclasses should override and call super.
 */
- (void)invalidate;

/**
 * Returns whether port has been marked invalid.
 */
- (BOOL)isValid;

/**
 * Returns amount of space used for header info at beginning of messages.
 * Subclasses should override (this implementation returns 0).
 */
- (NSUInteger)reservedSpaceLength;

/**
 * NSMachPort compatibility.
 */
- (NSInteger)machPort;

/**
 *  Sets the object that received messages will be passed off to.
 */
- (void)setDelegate:(id)anObject;

/**
 *  Returns the object that received messages will be passed off to.
 */
- (id)delegate;

/**
 * Internal method for sending message, for use by subclasses.
 */
- (BOOL)sendBeforeDate:(NSDate*)when
            components:(NSMutableArray*)components
                  from:(NSPort*)receivingPort
              reserved:(NSUInteger)length;


/**
 * Internal method for sending message, for use by subclasses.
 */
- (BOOL)sendBeforeDate:(NSDate*)when
                 msgid:(NSInteger)msgid
            components:(NSMutableArray*)components
                  from:(NSPort*)receivingPort
              reserved:(NSUInteger)length;

/**
 * Internal method for handling messages arriving throuch services
 */
#ifndef NEW_STYLE
- (BOOL) handleMessage:(EINetMessage*)msg fromConnection:(EINetConnection*)sender;
- (BOOL) handleMessage:(EINetMessage*)msg fromService:(EINetService*)sender;
#endif //#ifndef NEW_STYLE


@end

#ifdef OBSOLETE
/*
 * This is a callback method used by the NSRunLoop class to determine which
 * descriptors to watch for the port.  Subclasses override it.
 */
@interface NSPort (GNUstep)
- (void)getFds:(NSInteger*)fds count:(NSInteger*)count;
@end
#endif //#ifdef OBSOLETE

